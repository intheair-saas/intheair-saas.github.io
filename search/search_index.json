{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Repo Description This repo is the Saas Platform's backend, it is meant to serve the data to an other app in the repo named saas_front, and to communicate with the hubspot api. The backend is a rest api, based on the Django framework, it uses celery for its async tasks. The Documentation can be navigated through with the navigation menu. Dependencies Contact","title":"Repo Description"},{"location":"#repo-description","text":"This repo is the Saas Platform's backend, it is meant to serve the data to an other app in the repo named saas_front, and to communicate with the hubspot api. The backend is a rest api, based on the Django framework, it uses celery for its async tasks. The Documentation can be navigated through with the navigation menu.","title":"Repo Description"},{"location":"#dependencies","text":"","title":"Dependencies"},{"location":"#contact","text":"","title":"Contact"},{"location":"Api/Authentication/","text":"Authentication API Note This section is a documentation describing the usage of the Auth endpoints API. Login To login to the backend server and retrieve the data accessible by the user, a post request should be sent by the user to the /api/login endpoint: Request POST / HTTP/1.1 Host: <BASE_URL>/api/login/ Header: Content-Type: application/json Body: { email: <EMAIL>, password: <PASS> } <BASE URL> : Being the base url of the backend. <EMAIL> : The users email. <PASS> : The users Password in clear text. Response The response for this request is a json object that contains 2 tokens, a refresh token and an access token. here is an example: {\"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY5OTEwMTA0MiwiaWF0IjoxNjk2NTA5MDQyLCJqdGkiOiI5ZjA3NjdjMDNmZmM0ZTI3YmQxODYzMTJiZmI2YjdhZiIsInVzZXJfaWQiOjEsInVzZXJuYW1lIjoiaGFpdGFtIiwidXNlcl90eXBlIjoiQURNSU4ifQ.vzuSpBGo9SxNmHhCpfUkgxZWRM20dvUl5eJQCStxW1M\",\"access\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjk2NTA5NDAyLCJpYXQiOjE2OTY1MDkwNDIsImp0aSI6ImM0Y2EzMWFhMjc1ZTQxOTQ4ZTk1MDY0YWJmNWQ3NTQ3IiwidXNlcl9pZCI6MSwidXNlcm5hbWUiOiJoYWl0YW0iLCJ1c2VyX3R5cGUiOiJBRE1JTiJ9.t8Dw6dCRVWIJf6yJOTALjCbBfgUhdfUC3Swtm2-KP5g\"} access : The access token is used for the authentication process on each request, it expires every 5 minutes and needs to be refreshed with the refresh token generated with it. refresh : The refresh token is used to refresh the access token and keep the session open. A refresh token gets expired after 30 days Data The access token is JWT encoded and contains some data related to the user connected. if we decode the token we can retrieve this object: { \"token_type\": \"access\", \"exp\": 1696509402, \"iat\": 1696509042, \"jti\": \"c4ca31aa275e41948e95064abf5d7547\", \"user_id\": 1, \"username\": \"haitam\", \"user_type\": \"ADMIN\" } username : username of the user connected. user_type : Type of the user connected (you can check the user types available in user types ) Refresh The access used for authentication gets expired every 5 minutes to maintain a certain level of security. To keep the connection open the user needs to refresh that token using the refresh token generated with it. Request To refresh the access token you need to send a request as follow: POST / HTTP/1.1 Host: <BASE_URL>/api/token/refresh/ Header: Content-Type: application/json Body: { refresh: <REFRESH TOKEN> } <BASE URL> : Being the base url of the backend. <REFRESH TOKEN> : The refresh token generated earlier. Response The response for the refresh token is as follow : {\"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY5OTEwMTA0MiwiaWF0IjoxNjk2NTA5MDQyLCJqdGkiOiI5ZjA3NjdjMDNmZmM0ZTI3YmQxODYzMTJiZmI2YjdhZiIsInVzZXJfaWQiOjEsInVzZXJuYW1lIjoiaGFpdGFtIiwidXNlcl90eXBlIjoiQURNSU4ifQ.vzuSpBGo9SxNmHhCpfUkgxZWRM20dvUl5eJQCStxW1M\",\"access\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjk2NTA5NDAyLCJpYXQiOjE2OTY1MDkwNDIsImp0aSI6ImM0Y2EzMWFhMjc1ZTQxOTQ4ZTk1MDY0YWJmNWQ3NTQ3IiwidXNlcl9pZCI6MSwidXNlcm5hbWUiOiJoYWl0YW0iLCJ1c2VyX3R5cGUiOiJBRE1JTiJ9.t8Dw6dCRVWIJf6yJOTALjCbBfgUhdfUC3Swtm2-KP5g\"} access : New generated access token. refresh : New refresh token. Important After a refresh token is used, it is being blacklisted , therefore impossible to use a second time to refresh the access token. You will need to use the newly generated refresh token every time you refresh the access token.","title":"Authentication API"},{"location":"Api/Authentication/#authentication-api","text":"Note This section is a documentation describing the usage of the Auth endpoints API.","title":"Authentication API"},{"location":"Api/Authentication/#login","text":"To login to the backend server and retrieve the data accessible by the user, a post request should be sent by the user to the /api/login endpoint:","title":"Login"},{"location":"Api/Authentication/#request","text":"POST / HTTP/1.1 Host: <BASE_URL>/api/login/ Header: Content-Type: application/json Body: { email: <EMAIL>, password: <PASS> } <BASE URL> : Being the base url of the backend. <EMAIL> : The users email. <PASS> : The users Password in clear text.","title":"Request"},{"location":"Api/Authentication/#response","text":"The response for this request is a json object that contains 2 tokens, a refresh token and an access token. here is an example: {\"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY5OTEwMTA0MiwiaWF0IjoxNjk2NTA5MDQyLCJqdGkiOiI5ZjA3NjdjMDNmZmM0ZTI3YmQxODYzMTJiZmI2YjdhZiIsInVzZXJfaWQiOjEsInVzZXJuYW1lIjoiaGFpdGFtIiwidXNlcl90eXBlIjoiQURNSU4ifQ.vzuSpBGo9SxNmHhCpfUkgxZWRM20dvUl5eJQCStxW1M\",\"access\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjk2NTA5NDAyLCJpYXQiOjE2OTY1MDkwNDIsImp0aSI6ImM0Y2EzMWFhMjc1ZTQxOTQ4ZTk1MDY0YWJmNWQ3NTQ3IiwidXNlcl9pZCI6MSwidXNlcm5hbWUiOiJoYWl0YW0iLCJ1c2VyX3R5cGUiOiJBRE1JTiJ9.t8Dw6dCRVWIJf6yJOTALjCbBfgUhdfUC3Swtm2-KP5g\"} access : The access token is used for the authentication process on each request, it expires every 5 minutes and needs to be refreshed with the refresh token generated with it. refresh : The refresh token is used to refresh the access token and keep the session open. A refresh token gets expired after 30 days","title":"Response"},{"location":"Api/Authentication/#data","text":"The access token is JWT encoded and contains some data related to the user connected. if we decode the token we can retrieve this object: { \"token_type\": \"access\", \"exp\": 1696509402, \"iat\": 1696509042, \"jti\": \"c4ca31aa275e41948e95064abf5d7547\", \"user_id\": 1, \"username\": \"haitam\", \"user_type\": \"ADMIN\" } username : username of the user connected. user_type : Type of the user connected (you can check the user types available in user types )","title":"Data"},{"location":"Api/Authentication/#refresh","text":"The access used for authentication gets expired every 5 minutes to maintain a certain level of security. To keep the connection open the user needs to refresh that token using the refresh token generated with it.","title":"Refresh"},{"location":"Api/Authentication/#request_1","text":"To refresh the access token you need to send a request as follow: POST / HTTP/1.1 Host: <BASE_URL>/api/token/refresh/ Header: Content-Type: application/json Body: { refresh: <REFRESH TOKEN> } <BASE URL> : Being the base url of the backend. <REFRESH TOKEN> : The refresh token generated earlier.","title":"Request"},{"location":"Api/Authentication/#response_1","text":"The response for the refresh token is as follow : {\"refresh\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY5OTEwMTA0MiwiaWF0IjoxNjk2NTA5MDQyLCJqdGkiOiI5ZjA3NjdjMDNmZmM0ZTI3YmQxODYzMTJiZmI2YjdhZiIsInVzZXJfaWQiOjEsInVzZXJuYW1lIjoiaGFpdGFtIiwidXNlcl90eXBlIjoiQURNSU4ifQ.vzuSpBGo9SxNmHhCpfUkgxZWRM20dvUl5eJQCStxW1M\",\"access\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjk2NTA5NDAyLCJpYXQiOjE2OTY1MDkwNDIsImp0aSI6ImM0Y2EzMWFhMjc1ZTQxOTQ4ZTk1MDY0YWJmNWQ3NTQ3IiwidXNlcl9pZCI6MSwidXNlcm5hbWUiOiJoYWl0YW0iLCJ1c2VyX3R5cGUiOiJBRE1JTiJ9.t8Dw6dCRVWIJf6yJOTALjCbBfgUhdfUC3Swtm2-KP5g\"} access : New generated access token. refresh : New refresh token. Important After a refresh token is used, it is being blacklisted , therefore impossible to use a second time to refresh the access token. You will need to use the newly generated refresh token every time you refresh the access token.","title":"Response"},{"location":"Api/Company/","text":"Company Endpoints This page regroups a set of endpoints to interact with the companies related data. Retrieve data Single company data : company/<id> To retrieve a company data you can request the api endpoint /api/company/<id> : GET / HTTP/1.1 Host: <BASE_URL>/api/company/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The company's id of whom you want to retrieve data, it is the \"N_SIRET\" property. <ACCESS TOKEN> : The connected user's access token. This endpoints response is a json object that contains the sector's data: NEEDS TO BE EDITED { \"activity_sector\": \"activity sector label\", \"description\": \"activity sector description\", } All Companies Data : company/ To retrieve the list of all the companies and their data at once you can request the api endpoint /api/company/ : GET / HTTP/1.1 Host: <BASE_URL>/api/company/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <ACCESS TOKEN> : The connected user's access token. This endpoint response is a list of json objects that contains companies data (The list of all companies): NEEDS TO BE EDITED [ { \"activity_sector\": \"sector \", \"description\": \"description\", }, { \"activity_sector\": \"sector 2\", \"description\": \"description\", }, ... ... ] Delete Company Important Only ADMIN users can delete companies. To delete a company data you can request the api endpoint /api/company/<id> : DELETE / HTTP/1.1 Host: <BASE_URL>/api/company/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The company's id of whom you want to retrieve data, it is the \"N_SIRET\" property. <ACCESS TOKEN> : The connected user's access token. Create company Important Only ADMIN or AG_DATA users can create companies with this API. To create a company data you can request the api endpoint /api/company/ : NEEDS TO BE EDITED POST / HTTP/1.1 Host: <BASE_URL>/api/company/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"activity_company\": \"activity company label\", \"description\": \"activity company description\", } <ACCESS TOKEN> : The connected user's access token. Update company Important Only ADMIN or AG_DATA users can update companies with this API. To update a company's data you can request the api endpoint /api/company/ : NEEDS TO BE EDITED POST / HTTP/1.1 Host: <BASE_URL>/api/company/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"activity_company\": \"activity company label\", \"description\": \"activity company description\", } <ACCESS TOKEN> : The connected user's access token.","title":"Company Endpoints"},{"location":"Api/Company/#company-endpoints","text":"This page regroups a set of endpoints to interact with the companies related data.","title":"Company Endpoints"},{"location":"Api/Company/#retrieve-data","text":"","title":"Retrieve data"},{"location":"Api/Company/#single-company-data-companyid","text":"To retrieve a company data you can request the api endpoint /api/company/<id> : GET / HTTP/1.1 Host: <BASE_URL>/api/company/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The company's id of whom you want to retrieve data, it is the \"N_SIRET\" property. <ACCESS TOKEN> : The connected user's access token. This endpoints response is a json object that contains the sector's data: NEEDS TO BE EDITED { \"activity_sector\": \"activity sector label\", \"description\": \"activity sector description\", }","title":"Single company data : company/&lt;id&gt;"},{"location":"Api/Company/#all-companies-data-company","text":"To retrieve the list of all the companies and their data at once you can request the api endpoint /api/company/ : GET / HTTP/1.1 Host: <BASE_URL>/api/company/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <ACCESS TOKEN> : The connected user's access token. This endpoint response is a list of json objects that contains companies data (The list of all companies): NEEDS TO BE EDITED [ { \"activity_sector\": \"sector \", \"description\": \"description\", }, { \"activity_sector\": \"sector 2\", \"description\": \"description\", }, ... ... ]","title":"All Companies Data : company/"},{"location":"Api/Company/#delete-company","text":"Important Only ADMIN users can delete companies. To delete a company data you can request the api endpoint /api/company/<id> : DELETE / HTTP/1.1 Host: <BASE_URL>/api/company/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The company's id of whom you want to retrieve data, it is the \"N_SIRET\" property. <ACCESS TOKEN> : The connected user's access token.","title":"Delete Company"},{"location":"Api/Company/#create-company","text":"Important Only ADMIN or AG_DATA users can create companies with this API. To create a company data you can request the api endpoint /api/company/ : NEEDS TO BE EDITED POST / HTTP/1.1 Host: <BASE_URL>/api/company/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"activity_company\": \"activity company label\", \"description\": \"activity company description\", } <ACCESS TOKEN> : The connected user's access token.","title":"Create company"},{"location":"Api/Company/#update-company","text":"Important Only ADMIN or AG_DATA users can update companies with this API. To update a company's data you can request the api endpoint /api/company/ : NEEDS TO BE EDITED POST / HTTP/1.1 Host: <BASE_URL>/api/company/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"activity_company\": \"activity company label\", \"description\": \"activity company description\", } <ACCESS TOKEN> : The connected user's access token.","title":"Update company"},{"location":"Api/Permissions/","text":"","title":"Permissions"},{"location":"Api/Project/","text":"Project path('project/', ProjectsList.as_view(), name=\"projects_list\"), path('project/<int:pk>', ProjectsDetail.as_view(), name=\"project_single\"),","title":"Project"},{"location":"Api/Project/#project","text":"path('project/', ProjectsList.as_view(), name=\"projects_list\"), path('project/<int:pk>', ProjectsDetail.as_view(), name=\"project_single\"),","title":"Project"},{"location":"Api/Project_Type/","text":"Project Type path('projecttype/', ProjectTypesList.as_view(), name=\"projecttypes_list\"), path('projecttype/<int:pk>', ProjectTypesDetail.as_view(), name=\"projecttype_single\"),","title":"Project Type"},{"location":"Api/Project_Type/#project-type","text":"path('projecttype/', ProjectTypesList.as_view(), name=\"projecttypes_list\"), path('projecttype/<int:pk>', ProjectTypesDetail.as_view(), name=\"projecttype_single\"),","title":"Project Type"},{"location":"Api/Sector/","text":"Sectors Endpoints This page regroups a set of endpoints to interact with the sectors related data. Retrieve data Single sector data : sector/<id> To retrieve a sector data you can request the api endpoint /api/sector/<id> : GET / HTTP/1.1 Host: <BASE_URL>/api/sector/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The sector's id of whom you want to retrieve data, it is the \"activity_sector\" property. <ACCESS TOKEN> : The connected user's access token. This endpoints response is a json object that contains the sector's data: { \"activity_sector\": \"activity sector label\", \"description\": \"activity sector description\", } All sectors Data : sector/ To retrieve the list of all the sectors and their data at once you can request the api endpoint /api/sector/ : GET / HTTP/1.1 Host: <BASE_URL>/api/sector/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <ACCESS TOKEN> : The connected user's access token. This endpoint response is a list of json objects that contains sectors data (The list of all sectors): [ { \"activity_sector\": \"sector \", \"description\": \"description\", }, { \"activity_sector\": \"sector 2\", \"description\": \"description\", }, ... ... ] Delete Sector Important Only ADMIN users can delete sectors. To delete a sector data you can request the api endpoint /api/sector/<id> : DELETE / HTTP/1.1 Host: <BASE_URL>/api/sector/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The sector's id of whom you want to retrieve data, it is the \"activity_sector\" property. <ACCESS TOKEN> : The connected user's access token. Create Sector Important Only ADMIN or AG_DATA users can create sectors with this API. To create a sector data you can request the api endpoint /api/sector/ : POST / HTTP/1.1 Host: <BASE_URL>/api/sector/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"activity_sector\": \"activity sector label\", \"description\": \"activity sector description\", } <ACCESS TOKEN> : The connected user's access token.","title":"Sectors Endpoints"},{"location":"Api/Sector/#sectors-endpoints","text":"This page regroups a set of endpoints to interact with the sectors related data.","title":"Sectors Endpoints"},{"location":"Api/Sector/#retrieve-data","text":"","title":"Retrieve data"},{"location":"Api/Sector/#single-sector-data-sectorid","text":"To retrieve a sector data you can request the api endpoint /api/sector/<id> : GET / HTTP/1.1 Host: <BASE_URL>/api/sector/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The sector's id of whom you want to retrieve data, it is the \"activity_sector\" property. <ACCESS TOKEN> : The connected user's access token. This endpoints response is a json object that contains the sector's data: { \"activity_sector\": \"activity sector label\", \"description\": \"activity sector description\", }","title":"Single sector data : sector/&lt;id&gt;"},{"location":"Api/Sector/#all-sectors-data-sector","text":"To retrieve the list of all the sectors and their data at once you can request the api endpoint /api/sector/ : GET / HTTP/1.1 Host: <BASE_URL>/api/sector/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <ACCESS TOKEN> : The connected user's access token. This endpoint response is a list of json objects that contains sectors data (The list of all sectors): [ { \"activity_sector\": \"sector \", \"description\": \"description\", }, { \"activity_sector\": \"sector 2\", \"description\": \"description\", }, ... ... ]","title":"All sectors Data : sector/"},{"location":"Api/Sector/#delete-sector","text":"Important Only ADMIN users can delete sectors. To delete a sector data you can request the api endpoint /api/sector/<id> : DELETE / HTTP/1.1 Host: <BASE_URL>/api/sector/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The sector's id of whom you want to retrieve data, it is the \"activity_sector\" property. <ACCESS TOKEN> : The connected user's access token.","title":"Delete Sector"},{"location":"Api/Sector/#create-sector","text":"Important Only ADMIN or AG_DATA users can create sectors with this API. To create a sector data you can request the api endpoint /api/sector/ : POST / HTTP/1.1 Host: <BASE_URL>/api/sector/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"activity_sector\": \"activity sector label\", \"description\": \"activity sector description\", } <ACCESS TOKEN> : The connected user's access token.","title":"Create Sector"},{"location":"Api/User/","text":"User Endpoints This page regroups a set of endpoints to interact with the users related data. Retrieve data Single user data : user/<id> To retrieve a user data you can request the api endpoint /api/user/<id> : GET / HTTP/1.1 Host: <BASE_URL>/api/user/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The user's id of whom you want to retrieve data. <ACCESS TOKEN> : The connected user's access token. Important If a user is a CLIENT type, he will only access and retrieve his own data via the API. If the user is a ADMIN or AG_DATA type, then he can access all the users data via the API. This endpoints response is a json object that contains the user's data: { \"id\":2, \"last_login\":\"2023-09-28T11:40:59Z\", \"last_edit_date\":\"2023-09-28T11:40:59.008359Z\", \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://camille.linkedin.com\", \"hubspot_user_id\":\"123dwq56fwq\", \"company\":null, \"user_type\":\"CLIENT\", \"is_superuser\":false, \"is_staff\":false } All users Data : user/ To retrieve the list of all the users and their data at once you can request the api endpoint /api/user/ : GET / HTTP/1.1 Host: <BASE_URL>/api/user/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <ACCESS TOKEN> : The connected user's access token. Important If a user is a CLIENT type, he will only access and retrieve his own data via the API. If the user is a ADMIN or AG_DATA type, then he can access all the users data via the API. This endpoint response is a list of json objects that contains users data (The list of all users): [ { \"id\":2, \"last_login\":\"2023-09-28T11:40:59Z\", \"last_edit_date\":\"2023-09-28T11:40:59.008359Z\", \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://camille.linkedin.com\", \"hubspot_user_id\":\"123dwq56fwq\", \"company\":null, \"user_type\":\"CLIENT\", \"is_superuser\":false, \"is_staff\":false }, { \"id\":1, \"last_login\":\"2023-10-05T12:30:42Z\", \"last_edit_date\":\"2023-10-05T12:30:42.170246Z\", \"email\":\"haitam@gmail.com\", \"username\":\"haitam\", \"first_name\":\"\", \"last_name\":\"\", \"telephone_number\":null, \"position\":null, \"linkedin_url\":null, \"hubspot_user_id\":\"\", \"company\":null, \"user_type\":\"ADMIN\", \"is_superuser\":true,\" is_staff\":true }, ... ... ] Update User data To update a user data you can request the api endpoint /api/user/<id> : PUT / HTTP/1.1 Host: <BASE_URL>/api/user/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://user.linkedin.com\", \"company\":\"company\", \"user_type\":\"CLIENT\", } <id> : The user's id of whom you want to retrieve data. <ACCESS TOKEN> : The connected user's access token. Important If a user is a CLIENT type, he can only update his own data via this API endpoint and can't update his password. If the user is a ADMIN or AG_DATA type, then he can update all the users data via this API call, he can also change user's password by adding the propriety \"password\" : \"new pass\" to the body object. This endpoints response is a json object that contains the new user's data: { \"id\":2, \"last_login\":\"2023-09-28T11:40:59Z\", \"last_edit_date\":\"2023-09-28T11:40:59.008359Z\", \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://camille.linkedin.com\", \"hubspot_user_id\":\"123dwq56fwq\", \"company\":null, \"user_type\":\"CLIENT\", \"is_superuser\":false, \"is_staff\":false } Delete User Important Only ADMIN users can delete users. To delete a user data you can request the api endpoint /api/user/<id> : DELETE / HTTP/1.1 Host: <BASE_URL>/api/user/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The user's id of whom you want to retrieve data. <ACCESS TOKEN> : The connected user's access token. Create User Important Only ADMIN or AG_DATA users can create users with this API. To create a user data you can request the api endpoint /api/user/ : POST / HTTP/1.1 Host: <BASE_URL>/api/user/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://user.linkedin.com\", \"password\": \"user password\", \"company\":\"company\", \"user_type\":\"CLIENT\", } <ACCESS TOKEN> : The connected user's access token. Change Password This endpoint is for CLIENT type users to enable them to change their password. To change the users password you need to call the api /api/passwordchange/ . POST / HTTP/1.1 Host: <BASE_URL>/api/passwordchange/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"old_password\": \"Old user's password\", \"new_password\": \"New user's password\", } <ACCESS TOKEN> : The connected user's access token.","title":"User Endpoints"},{"location":"Api/User/#user-endpoints","text":"This page regroups a set of endpoints to interact with the users related data.","title":"User Endpoints"},{"location":"Api/User/#retrieve-data","text":"","title":"Retrieve data"},{"location":"Api/User/#single-user-data-userid","text":"To retrieve a user data you can request the api endpoint /api/user/<id> : GET / HTTP/1.1 Host: <BASE_URL>/api/user/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The user's id of whom you want to retrieve data. <ACCESS TOKEN> : The connected user's access token. Important If a user is a CLIENT type, he will only access and retrieve his own data via the API. If the user is a ADMIN or AG_DATA type, then he can access all the users data via the API. This endpoints response is a json object that contains the user's data: { \"id\":2, \"last_login\":\"2023-09-28T11:40:59Z\", \"last_edit_date\":\"2023-09-28T11:40:59.008359Z\", \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://camille.linkedin.com\", \"hubspot_user_id\":\"123dwq56fwq\", \"company\":null, \"user_type\":\"CLIENT\", \"is_superuser\":false, \"is_staff\":false }","title":"Single user data : user/&lt;id&gt;"},{"location":"Api/User/#all-users-data-user","text":"To retrieve the list of all the users and their data at once you can request the api endpoint /api/user/ : GET / HTTP/1.1 Host: <BASE_URL>/api/user/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <ACCESS TOKEN> : The connected user's access token. Important If a user is a CLIENT type, he will only access and retrieve his own data via the API. If the user is a ADMIN or AG_DATA type, then he can access all the users data via the API. This endpoint response is a list of json objects that contains users data (The list of all users): [ { \"id\":2, \"last_login\":\"2023-09-28T11:40:59Z\", \"last_edit_date\":\"2023-09-28T11:40:59.008359Z\", \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://camille.linkedin.com\", \"hubspot_user_id\":\"123dwq56fwq\", \"company\":null, \"user_type\":\"CLIENT\", \"is_superuser\":false, \"is_staff\":false }, { \"id\":1, \"last_login\":\"2023-10-05T12:30:42Z\", \"last_edit_date\":\"2023-10-05T12:30:42.170246Z\", \"email\":\"haitam@gmail.com\", \"username\":\"haitam\", \"first_name\":\"\", \"last_name\":\"\", \"telephone_number\":null, \"position\":null, \"linkedin_url\":null, \"hubspot_user_id\":\"\", \"company\":null, \"user_type\":\"ADMIN\", \"is_superuser\":true,\" is_staff\":true }, ... ... ]","title":"All users Data : user/"},{"location":"Api/User/#update-user-data","text":"To update a user data you can request the api endpoint /api/user/<id> : PUT / HTTP/1.1 Host: <BASE_URL>/api/user/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://user.linkedin.com\", \"company\":\"company\", \"user_type\":\"CLIENT\", } <id> : The user's id of whom you want to retrieve data. <ACCESS TOKEN> : The connected user's access token. Important If a user is a CLIENT type, he can only update his own data via this API endpoint and can't update his password. If the user is a ADMIN or AG_DATA type, then he can update all the users data via this API call, he can also change user's password by adding the propriety \"password\" : \"new pass\" to the body object. This endpoints response is a json object that contains the new user's data: { \"id\":2, \"last_login\":\"2023-09-28T11:40:59Z\", \"last_edit_date\":\"2023-09-28T11:40:59.008359Z\", \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://camille.linkedin.com\", \"hubspot_user_id\":\"123dwq56fwq\", \"company\":null, \"user_type\":\"CLIENT\", \"is_superuser\":false, \"is_staff\":false }","title":"Update User data"},{"location":"Api/User/#delete-user","text":"Important Only ADMIN users can delete users. To delete a user data you can request the api endpoint /api/user/<id> : DELETE / HTTP/1.1 Host: <BASE_URL>/api/user/<id> Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json <id> : The user's id of whom you want to retrieve data. <ACCESS TOKEN> : The connected user's access token.","title":"Delete User"},{"location":"Api/User/#create-user","text":"Important Only ADMIN or AG_DATA users can create users with this API. To create a user data you can request the api endpoint /api/user/ : POST / HTTP/1.1 Host: <BASE_URL>/api/user/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"email\":\"user@gmail.com\", \"username\":\"user_test\", \"first_name\":\"user\", \"last_name\":\"test test\", \"telephone_number\":\"0612345678\", \"position\":\"dev\", \"linkedin_url\":\"https://user.linkedin.com\", \"password\": \"user password\", \"company\":\"company\", \"user_type\":\"CLIENT\", } <ACCESS TOKEN> : The connected user's access token.","title":"Create User"},{"location":"Api/User/#change-password","text":"This endpoint is for CLIENT type users to enable them to change their password. To change the users password you need to call the api /api/passwordchange/ . POST / HTTP/1.1 Host: <BASE_URL>/api/passwordchange/ Header: Authorization: Bearer <ACCESS TOKEN> Content-Type: application/json Body: { \"old_password\": \"Old user's password\", \"new_password\": \"New user's password\", } <ACCESS TOKEN> : The connected user's access token.","title":"Change Password"},{"location":"Apps/Authentication/","text":"","title":"Authentication"},{"location":"Apps/contact/CONTACT/","text":"Description This is the Contact App Documentation ! 1. Models 2. Views 3. Serializers","title":"Description"},{"location":"Apps/contact/CONTACT/#description","text":"This is the Contact App Documentation !","title":"Description"},{"location":"Apps/contact/CONTACT/#1-models","text":"","title":"1. Models"},{"location":"Apps/contact/CONTACT/#2-views","text":"","title":"2. Views"},{"location":"Apps/contact/CONTACT/#3-serializers","text":"","title":"3. Serializers"},{"location":"Apps/contact/MODELS/","text":"","title":"MODELS"},{"location":"Apps/contact/SERIALIZERS/","text":"","title":"SERIALIZERS"},{"location":"Apps/contact/VIEWS/","text":"","title":"VIEWS"},{"location":"Apps/files/FILES/","text":"Files App >> Go back to Home Menu << This is the Files App Documentation ! 1. Models 2. Views 3. Serializers 4. Scripts","title":"Files App"},{"location":"Apps/files/FILES/#files-app","text":">> Go back to Home Menu << This is the Files App Documentation !","title":"Files App"},{"location":"Apps/files/FILES/#1-models","text":"","title":"1. Models"},{"location":"Apps/files/FILES/#2-views","text":"","title":"2. Views"},{"location":"Apps/files/FILES/#3-serializers","text":"","title":"3. Serializers"},{"location":"Apps/files/FILES/#4-scripts","text":"","title":"4. Scripts"},{"location":"Apps/files/MODELS/","text":"","title":"MODELS"},{"location":"Apps/files/SERIALIZERS/","text":"","title":"SERIALIZERS"},{"location":"Apps/files/VIEWS/","text":"","title":"VIEWS"},{"location":"Apps/hubspot_api/HUBSPOT_API/","text":"Hubspot Api App >> Go back to Home Menu << This is the Hubspot Api App Documentation ! 1. Models 2. Views 3. Serializers","title":"Hubspot Api App"},{"location":"Apps/hubspot_api/HUBSPOT_API/#hubspot-api-app","text":">> Go back to Home Menu << This is the Hubspot Api App Documentation !","title":"Hubspot Api App"},{"location":"Apps/hubspot_api/HUBSPOT_API/#1-models","text":"","title":"1. Models"},{"location":"Apps/hubspot_api/HUBSPOT_API/#2-views","text":"","title":"2. Views"},{"location":"Apps/hubspot_api/HUBSPOT_API/#3-serializers","text":"","title":"3. Serializers"},{"location":"Apps/hubspot_api/MODELS/","text":"","title":"MODELS"},{"location":"Apps/hubspot_api/SERIALIZERS/","text":"","title":"SERIALIZERS"},{"location":"Apps/hubspot_api/VIEWS/","text":"","title":"VIEWS"},{"location":"Apps/raster/MODELS/","text":"","title":"MODELS"},{"location":"Apps/raster/RASTER/","text":"Raster App >> Go back to Home Menu << This is the Raster App Documentation ! 1. Models 2. Views 3. Serializers","title":"Raster App"},{"location":"Apps/raster/RASTER/#raster-app","text":">> Go back to Home Menu << This is the Raster App Documentation !","title":"Raster App"},{"location":"Apps/raster/RASTER/#1-models","text":"","title":"1. Models"},{"location":"Apps/raster/RASTER/#2-views","text":"","title":"2. Views"},{"location":"Apps/raster/RASTER/#3-serializers","text":"","title":"3. Serializers"},{"location":"Apps/raster/SERIALIZERS/","text":"","title":"SERIALIZERS"},{"location":"Apps/raster/VIEWS/","text":"","title":"VIEWS"},{"location":"Apps/reports/MODELS/","text":"","title":"MODELS"},{"location":"Apps/reports/REPORTS/","text":"Reports App >> Go back to Home Menu << This is the Reports App Documentation ! 1. Models 2. Views 3. Serializers","title":"Reports App"},{"location":"Apps/reports/REPORTS/#reports-app","text":">> Go back to Home Menu << This is the Reports App Documentation !","title":"Reports App"},{"location":"Apps/reports/REPORTS/#1-models","text":"","title":"1. Models"},{"location":"Apps/reports/REPORTS/#2-views","text":"","title":"2. Views"},{"location":"Apps/reports/REPORTS/#3-serializers","text":"","title":"3. Serializers"},{"location":"Apps/reports/SERIALIZERS/","text":"","title":"SERIALIZERS"},{"location":"Apps/reports/VIEWS/","text":"","title":"VIEWS"},{"location":"Apps/user/Models/","text":"User App Models Documentation User Types","title":"User App Models Documentation"},{"location":"Apps/user/Models/#user-app-models-documentation","text":"","title":"User App Models Documentation"},{"location":"Apps/user/Models/#user-types","text":"","title":"User Types"},{"location":"Apps/user/SERIALIZERS/","text":"","title":"SERIALIZERS"},{"location":"Apps/user/USER/","text":"USER App >> Go back to Home Menu << This is the USER App Documentation ! 1. Models 2. Views 3. Serializers","title":"USER App"},{"location":"Apps/user/USER/#user-app","text":">> Go back to Home Menu << This is the USER App Documentation !","title":"USER App"},{"location":"Apps/user/USER/#1-models","text":"","title":"1. Models"},{"location":"Apps/user/USER/#2-views","text":"","title":"2. Views"},{"location":"Apps/user/USER/#3-serializers","text":"","title":"3. Serializers"},{"location":"Apps/user/Views/","text":"User Views UserDetail","title":"User Views"},{"location":"Apps/user/Views/#user-views","text":"","title":"User Views"},{"location":"Apps/user/Views/#userdetail","text":"","title":"UserDetail"},{"location":"Architecture/Database/","text":"Database Architecture The database architecture can be probed via the graphs bellow: Note Click on the SVG image to browse the graph Note You can search the graph with the command CTRL + F","title":"Database"},{"location":"Architecture/Database/#database-architecture","text":"The database architecture can be probed via the graphs bellow: Note Click on the SVG image to browse the graph Note You can search the graph with the command CTRL + F","title":"Database Architecture"},{"location":"Architecture/Functionnal/","text":"","title":"Functionnal"},{"location":"installation/INSTALLATION/","text":"Installation Guide This is the Intheair Saas Platform installation guide, follow the guide to have the backend up and running on your environement. Note We suggest you to follow the installation to the end before running the server to avoid errors. Warning we suppose that you are in a docker or in a virtual environement, create one before following the installation if not ! Python dependencies All the django and python dependencies are added to the requirement.txt . To install the dependencies just run pip install -r <yourpath>/requirements.txt Geospatial dependencies After installing the python dependencies, we need to install some libraries and packages to use GDAL and GIS tools. First we need to run this command to install, directly or by dependency, the required geospatial libraries: sudo apt-get install cmake binutils libproj-dev gdal-bin Note It may be necessary to run the ldconfig command after installing each library. For example: shell sudo make install sudo ldconfig We will then have to install GEOS , a C++ library for performing geometric operations, and is the default internal geometry representation used by GeoDjango (it\u2019s behind the \u00ab lazy \u00bb geometries). Specifically, the C API library is called (e.g., libgeos_c.so) directly from Python using ctypes. First, download GEOS from the GEOS website and untar the source archive: wget https://download.osgeo.org/geos/geos-3.12.0.tar.bz2 tar xjf geos-3.12.0.tar.bz2 Then we have to build and install the package: cd geos-3.12.0 mkdir build cd build cmake -DCMAKE_BUILD_TYPE=Release .. cmake --build . sudo cmake --build . --target install Then we will have to install GDAL , First download the latest GDAL release version and untar the archive: wget https://download.osgeo.org/gdal/3.7.2/gdal-3.7.2.tar.gz tar xzf gdal-3.7.2.tar.gz Then we have to build and install the package: cd gdal-3.7.2 mkdir build cd build cmake .. cmake --build . sudo cmake --build . --target install Important If you get any errors while trying to install the GIS dependencies, try troubleshooting your environment via this link Geodjango Troubleshooting . RabbitMQ The backend uses celery in order to handle the async tasks, the celery library needs to connect to a messaging queue server in order to queue its tasks. To achieve that we need to install and run RabbitMQ a message queuing server and run it. For installing RabbitMQ on Linux just run this script and you are good to go: #!/bin/sh sudo apt-get install curl gnupg apt-transport-https -y ## Team RabbitMQ's main signing key curl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null ## Community mirror of Cloudsmith: modern Erlang repository curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null ## Community mirror of Cloudsmith: RabbitMQ repository curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null ## Add apt repositories maintained by Team RabbitMQ sudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF ## Provides modern Erlang/OTP releases ## deb [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main # another mirror for redundancy deb [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main ## Provides RabbitMQ ## deb [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main # another mirror for redundancy deb [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main EOF ## Update package indices sudo apt-get update -y ## Install Erlang packages sudo apt-get install -y erlang-base \\ erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\ erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\ erlang-runtime-tools erlang-snmp erlang-ssl \\ erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl ## Install rabbitmq-server and its dependencies sudo apt-get install rabbitmq-server -y --fix-missing Configuration To configure our environment please refer to the /intheair/.env file. Celery To use Celery we need to create a RabbitMQ user, a virtual host and allow that user access to that virtual host: sudo rabbitmqctl add_user <USER> <PASSWORD> sudo rabbitmqctl add_vhost <HOST NAME> sudo rabbitmqctl set_user_tags <USER> <TAG> sudo rabbitmqctl set_permissions -p <HOST NAME> <USER> \".*\" \".*\" \".*\" Substitute in appropriate values for myuser, mypassword and myvhost above. See the RabbitMQ access control documentation or the Admin Guide for more information. Email server The backend uses an emailing functionality, you can update the email section of the .env file to connect the backend to the smpt server used in the deployment EMAIL_HOST=<THE EMAIL SERVER HOST> EMAIL_PORT=<THE EMAIL SERVER PORT> EMAIL_HOST_USER=<THE EMAIL SERVER USER> EMAIL_HOST_PASSWORD=<THE EMAIL SERVER APP PASSWORD> CONTACT_EMAIL=<THE CONTACT EMAIL ADDRESS> DEFAULT_FROM_USER=<DEFAULT EXPEDITOR EMAIL (WILL PROBABLY BE THE CONTACT EMAIL ADDRESS)> Database The database used in our backend is a postgresql database, it needs to support GIS and raster functionalities. Make sure to install postgis and raster libraries in the database created (you can contact your database administrator to add the plugins). After creating and configuring the database you need to configure the backend to connect to it. Fill the variables in the .env file to allow the connection: DB_HOST=<DATABASE URL/HOST> DB_USERNAME=<USERNAME> DB_PASSWORD=<PASSWORD> DB_NAME=<DATABASE NAME> DB_PORT=<DATABASE PORT> Debug and Security For security purposes change the environment variables in the .env file to restrict/allow network access to the backend: # The generated DJANGO SECRET KEY SECRET_KEY=django-insecure-mt009#ax-n)0o@$=o31pg)e5$!xvx(^7cjdl(kf^6#yeo-tl)% # Set to True to have more details about the errors, or False when put to production DEBUG=False # the allowed DNS that have authorization to connect to the backend (it should be the Database DNS and Frontend DNS) ALLOWED_HOSTS=[<Front_DNS:PORT>, <DataBase_DNS:PORT>] # The allowed origins that can send form data to our backend (should be the Frontend DNS) ALLOWED_CRSF_ORIGINS=<Front_DNS:PORT> Run the server Init the Data [!WARNING] Don't run this section if you are using the always database pre-configured in this repository, only run it if you are using a new empty database ! To run the server we need to first migrate the data base: python manage.py makemigrations python manage.py migrate Then we have to create a super admin, run this command and follow the instructions: python manage-py createsuperuser <USER> We then have to populate the data base with the required data. We first open a django shell: python manage.py shell Then we can use the built in script to create the data: from files import script script.add_data_type() script.add_drone_fields() We then have to attribute to our user the ADMIN permissions and set an email address to him. in the opened shell enter the commands: from user.models import User user = User.objects.get(username=<USER>) user.email = '<EMAIL>' user.user_type = 'ADMIN' user.save() You can now exit the shell. Run To run the backend app you need to run the Django server , there RabbitMQ server and Celery . in the /intheair/ directory run this 3 commands in separate terminals: 1- Start Django server: python manage.py runserver 2- Start RabbitMQ: sudo rabbitmq-server start 3- Start Celery: celery -A intheair worker I hope the installation, configuration and running of the server went smoothly. Contact us if you ever have any problem or issue with the installation that the documentation didn't help you solve.","title":"Installation Guide"},{"location":"installation/INSTALLATION/#installation-guide","text":"This is the Intheair Saas Platform installation guide, follow the guide to have the backend up and running on your environement. Note We suggest you to follow the installation to the end before running the server to avoid errors. Warning we suppose that you are in a docker or in a virtual environement, create one before following the installation if not !","title":"Installation Guide"},{"location":"installation/INSTALLATION/#python-dependencies","text":"All the django and python dependencies are added to the requirement.txt . To install the dependencies just run pip install -r <yourpath>/requirements.txt","title":"Python dependencies"},{"location":"installation/INSTALLATION/#geospatial-dependencies","text":"After installing the python dependencies, we need to install some libraries and packages to use GDAL and GIS tools. First we need to run this command to install, directly or by dependency, the required geospatial libraries: sudo apt-get install cmake binutils libproj-dev gdal-bin Note It may be necessary to run the ldconfig command after installing each library. For example: shell sudo make install sudo ldconfig We will then have to install GEOS , a C++ library for performing geometric operations, and is the default internal geometry representation used by GeoDjango (it\u2019s behind the \u00ab lazy \u00bb geometries). Specifically, the C API library is called (e.g., libgeos_c.so) directly from Python using ctypes. First, download GEOS from the GEOS website and untar the source archive: wget https://download.osgeo.org/geos/geos-3.12.0.tar.bz2 tar xjf geos-3.12.0.tar.bz2 Then we have to build and install the package: cd geos-3.12.0 mkdir build cd build cmake -DCMAKE_BUILD_TYPE=Release .. cmake --build . sudo cmake --build . --target install Then we will have to install GDAL , First download the latest GDAL release version and untar the archive: wget https://download.osgeo.org/gdal/3.7.2/gdal-3.7.2.tar.gz tar xzf gdal-3.7.2.tar.gz Then we have to build and install the package: cd gdal-3.7.2 mkdir build cd build cmake .. cmake --build . sudo cmake --build . --target install Important If you get any errors while trying to install the GIS dependencies, try troubleshooting your environment via this link Geodjango Troubleshooting .","title":"Geospatial dependencies"},{"location":"installation/INSTALLATION/#rabbitmq","text":"The backend uses celery in order to handle the async tasks, the celery library needs to connect to a messaging queue server in order to queue its tasks. To achieve that we need to install and run RabbitMQ a message queuing server and run it. For installing RabbitMQ on Linux just run this script and you are good to go: #!/bin/sh sudo apt-get install curl gnupg apt-transport-https -y ## Team RabbitMQ's main signing key curl -1sLf \"https://keys.openpgp.org/vks/v1/by-fingerprint/0A9AF2115F4687BD29803A206B73A36E6026DFCA\" | sudo gpg --dearmor | sudo tee /usr/share/keyrings/com.rabbitmq.team.gpg > /dev/null ## Community mirror of Cloudsmith: modern Erlang repository curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-erlang.E495BB49CC4BBE5B.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg > /dev/null ## Community mirror of Cloudsmith: RabbitMQ repository curl -1sLf https://github.com/rabbitmq/signing-keys/releases/download/3.0/cloudsmith.rabbitmq-server.9F4587F226208342.key | sudo gpg --dearmor | sudo tee /usr/share/keyrings/rabbitmq.9F4587F226208342.gpg > /dev/null ## Add apt repositories maintained by Team RabbitMQ sudo tee /etc/apt/sources.list.d/rabbitmq.list <<EOF ## Provides modern Erlang/OTP releases ## deb [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main # another mirror for redundancy deb [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main deb-src [signed-by=/usr/share/keyrings/rabbitmq.E495BB49CC4BBE5B.gpg] https://ppa2.novemberain.com/rabbitmq/rabbitmq-erlang/deb/ubuntu jammy main ## Provides RabbitMQ ## deb [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa1.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main # another mirror for redundancy deb [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main deb-src [signed-by=/usr/share/keyrings/rabbitmq.9F4587F226208342.gpg] https://ppa2.novemberain.com/rabbitmq/rabbitmq-server/deb/ubuntu jammy main EOF ## Update package indices sudo apt-get update -y ## Install Erlang packages sudo apt-get install -y erlang-base \\ erlang-asn1 erlang-crypto erlang-eldap erlang-ftp erlang-inets \\ erlang-mnesia erlang-os-mon erlang-parsetools erlang-public-key \\ erlang-runtime-tools erlang-snmp erlang-ssl \\ erlang-syntax-tools erlang-tftp erlang-tools erlang-xmerl ## Install rabbitmq-server and its dependencies sudo apt-get install rabbitmq-server -y --fix-missing","title":"RabbitMQ"},{"location":"installation/INSTALLATION/#configuration","text":"To configure our environment please refer to the /intheair/.env file.","title":"Configuration"},{"location":"installation/INSTALLATION/#celery","text":"To use Celery we need to create a RabbitMQ user, a virtual host and allow that user access to that virtual host: sudo rabbitmqctl add_user <USER> <PASSWORD> sudo rabbitmqctl add_vhost <HOST NAME> sudo rabbitmqctl set_user_tags <USER> <TAG> sudo rabbitmqctl set_permissions -p <HOST NAME> <USER> \".*\" \".*\" \".*\" Substitute in appropriate values for myuser, mypassword and myvhost above. See the RabbitMQ access control documentation or the Admin Guide for more information.","title":"Celery"},{"location":"installation/INSTALLATION/#email-server","text":"The backend uses an emailing functionality, you can update the email section of the .env file to connect the backend to the smpt server used in the deployment EMAIL_HOST=<THE EMAIL SERVER HOST> EMAIL_PORT=<THE EMAIL SERVER PORT> EMAIL_HOST_USER=<THE EMAIL SERVER USER> EMAIL_HOST_PASSWORD=<THE EMAIL SERVER APP PASSWORD> CONTACT_EMAIL=<THE CONTACT EMAIL ADDRESS> DEFAULT_FROM_USER=<DEFAULT EXPEDITOR EMAIL (WILL PROBABLY BE THE CONTACT EMAIL ADDRESS)>","title":"Email server"},{"location":"installation/INSTALLATION/#database","text":"The database used in our backend is a postgresql database, it needs to support GIS and raster functionalities. Make sure to install postgis and raster libraries in the database created (you can contact your database administrator to add the plugins). After creating and configuring the database you need to configure the backend to connect to it. Fill the variables in the .env file to allow the connection: DB_HOST=<DATABASE URL/HOST> DB_USERNAME=<USERNAME> DB_PASSWORD=<PASSWORD> DB_NAME=<DATABASE NAME> DB_PORT=<DATABASE PORT>","title":"Database"},{"location":"installation/INSTALLATION/#debug-and-security","text":"For security purposes change the environment variables in the .env file to restrict/allow network access to the backend: # The generated DJANGO SECRET KEY SECRET_KEY=django-insecure-mt009#ax-n)0o@$=o31pg)e5$!xvx(^7cjdl(kf^6#yeo-tl)% # Set to True to have more details about the errors, or False when put to production DEBUG=False # the allowed DNS that have authorization to connect to the backend (it should be the Database DNS and Frontend DNS) ALLOWED_HOSTS=[<Front_DNS:PORT>, <DataBase_DNS:PORT>] # The allowed origins that can send form data to our backend (should be the Frontend DNS) ALLOWED_CRSF_ORIGINS=<Front_DNS:PORT>","title":"Debug and Security"},{"location":"installation/INSTALLATION/#run-the-server","text":"","title":"Run the server"},{"location":"installation/INSTALLATION/#init-the-data","text":"[!WARNING] Don't run this section if you are using the always database pre-configured in this repository, only run it if you are using a new empty database ! To run the server we need to first migrate the data base: python manage.py makemigrations python manage.py migrate Then we have to create a super admin, run this command and follow the instructions: python manage-py createsuperuser <USER> We then have to populate the data base with the required data. We first open a django shell: python manage.py shell Then we can use the built in script to create the data: from files import script script.add_data_type() script.add_drone_fields() We then have to attribute to our user the ADMIN permissions and set an email address to him. in the opened shell enter the commands: from user.models import User user = User.objects.get(username=<USER>) user.email = '<EMAIL>' user.user_type = 'ADMIN' user.save() You can now exit the shell.","title":"Init the Data"},{"location":"installation/INSTALLATION/#run","text":"To run the backend app you need to run the Django server , there RabbitMQ server and Celery . in the /intheair/ directory run this 3 commands in separate terminals: 1- Start Django server: python manage.py runserver 2- Start RabbitMQ: sudo rabbitmq-server start 3- Start Celery: celery -A intheair worker I hope the installation, configuration and running of the server went smoothly. Contact us if you ever have any problem or issue with the installation that the documentation didn't help you solve.","title":"Run"}]}